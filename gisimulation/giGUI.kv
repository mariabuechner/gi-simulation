#:kivy 1.10.0
#:import np numpy
#:import ntpath ntpath
#:import parser_def simulation.parser_def
#:import test kivy_test

#:set parser_info parser_def.get_arguments_info(parser_def.input_parser())
#:set num_input_size 0.3
#:set default_font_size 18
#:set line_height 40
#:set menu_button_width 100
#:set dark_grey np.divide([88, 88, 88, 50],[255., 255., 255., 100.])
#:set dark_red_button np.divide([255, 50, 50, 100],[255., 255., 255., 100.])
#:set dark_red_menu np.divide([154, 31, 31, 100],[255., 255., 255., 100.])
#:set darker_red_menu np.divide([128, 0, 0, 100],[255., 255., 255., 100.])


# All buttons
<Button>:
    font_size: default_font_size
    text_size: self.size
    halign: 'center'
    valign: 'center'
    max_lines: 1
    size_hint_y: None
    height: line_height

# All text inputs
<TextInput>:
    size_hint_y: None
    height: line_height
    size_hint_x: num_input_size
    multiline: False  # On enter, loose focus on textinput
    write_tab: False  # On tab, loose focus on textinput

# All checkboxes
<CheckBox>:
    size_hint: (None, None)
    height: line_height
    width: line_height
    canvas.before:
        Color:
            rgba: dark_grey
        Rectangle:
            pos: self.pos
            size: self.size


# All BoxLayouts
<BoxLayout>:
    padding: (1, 1, 0, 0 )

# All StackLayouts
<StackLayout>:
    padding: (1, 1, 0, 0 )

# Set rules for custom classes

# All NonFileBrowserLabel
<NonFileBrowserLabel>:
    font_size: default_font_size
    text_size: self.size
    halign: 'center'
    valign: 'center'
    max_lines: 1
    size_hint_y: None
    height: line_height
    canvas.before:
        Color:
            rgba: dark_grey
        Rectangle:
            pos: self.pos
            size: self.size


<MenuSpinnerButton>:
    background_color: dark_red_button
    halign: 'left'

<ScrollableLabel>:
    NonFileBrowserLabel:
        font_size: default_font_size
        max_lines: 0
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        text: root.text
        halign: 'left'
        valign: 'top'
        strip: True  #remove leading or trailing newlines or spaces

# gi GUI
<giGUI>:
    orientation: 'vertical'

    # Main Menu
    BoxLayout:
        size_hint_y: None
        height: line_height
        canvas.before:
            Color:
                rgba: dark_red_menu
            Rectangle:
                pos: self.pos
                size: self.size
        NonFileBrowserLabel:
            size_hint_x: None
            width: 180
            bold: True
            text: 'GI Simulation'
            canvas.before:
                Color:
                    rgba: dark_red_menu
                Rectangle:
                    pos: self.pos
                    size: self.size
        Button:
            size_hint_x: None
            width: 160
            background_color: dark_red_button
            text: 'Load input file...'
            on_release: root.show_input_load()
        MenuSpinner:
            size_hint_x: None
            width: 100
            background_color: dark_red_button
            id: save_spinner
            text: 'Save...'
            values: ['Input file...', 'Results...']
            on_text: root.on_save_spinner(self)
        BoxLayout:
            size_hint_x: None
            width: 250
            NonFileBrowserLabel:
                text: 'Show previous results'
                canvas.before:
                    Color:
                        rgba: darker_red_menu
                    Rectangle:
                        pos: self.pos
                        size: self.size
            CheckBox:
                disabled: not root.previous_results
                id: show_previous_results
                canvas:
                    Clear:
                    Color:
                        rgba: darker_red_menu
                    Rectangle:
                        size: self.size
                        pos: self.pos
                    Color:
                        rgba: 1, 1, 1, 1
                    Rectangle:
                        source: 'atlas://data/images/defaulttheme/checkbox%s_%s' % (('_radio' if self.group else ''), ('on' if self.active else 'off'))
                        size: self.size
                        pos: self.pos
        Widget:
        MenuSpinner:
            size_hint_x: None
            width: 150
            background_color: dark_red_button
            id: help_spinner
            text: 'Help...'
            values: ['Spectrum file', 'Input file']
            on_text: root.on_help_spinner(self)
        Button:
            background_color: dark_red_button
            size_hint_x: None
            width: 50
            text: 'Exit'
            on_release: app.stop()


    # Splitter to seperate general input area (left) and Tabs for results
    # and specific input (right)
    BoxLayout:
        Splitter:
            sizable_from: 'right'
            max_size: root.width*0.9
            min_size: root.width*0.02


            # Right side of splitter (splitters child widget)
            BoxLayout:
                orientation: 'vertical'
                TabbedPanel:
                    id: input_tabs
                    do_default_tab: False
                    tab_width: self.size[0]/len(self.tab_list)
                    default_tab: general_inputs

                    # Content of 'general input window'
                    TabbedPanelItem:
                        id: general_inputs
                        text: 'General Parameters'

                        #GridLayout:
                            #cols: 1
                        FloatLayout:

                            # General input
                            GridLayout:
                                cols: 3
                                pos_hint: {'top': 1}


                                # GI input
                                StackLayout:
                                    NonFileBrowserLabel:
                                        text: 'GI Design'
                                        bold: True
                                    BoxLayout:
                                        orientation: 'vertical'
                                        size_hint_y: None
                                        height: root.calc_boxlayout_height(line_height, self)
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Geometry'
                                                help_message: parser_info['geometry'][1]
                                            Spinner:
                                                id: geometry
                                                text: 'free'
                                                values: ['sym', 'conv', 'inv', 'free'] if beam_geometry.text == 'cone' else ['conv', 'free']
                                                on_text: root.on_geometry()
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Beam geometry'
                                                help_message: parser_info['beam_geometry'][1]
                                            Spinner:
                                                id: beam_geometry
                                                text: 'parallel'
                                                values: ['cone', 'parallel']
                                                on_text: root.on_beam_geometry()
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Design Energy [keV]'
                                                help_message: parser_info['design_energy'][1]
                                            FloatInput:
                                                id: design_energy
                                        BoxLayout:
                                            disabled: geometry.text == 'free'
                                            LabelHelp:
                                                text: 'Talbot order'
                                                help_message: parser_info['talbot_order'][1]
                                            FloatInput:
                                                id: talbot_order
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Sampling voxel size [um]'
                                                help_message: parser_info['sampling_rate'][1]
                                            FloatInput:
                                                id: sampling_rate

                                # Source
                                StackLayout:
                                    NonFileBrowserLabel:
                                        text: 'Source'
                                        bold: True
                                    BoxLayout:
                                        orientation: 'vertical'
                                        size_hint_y: None
                                        height: root.calc_boxlayout_height(line_height, self)
                                        BoxLayout:
                                            disabled: beam_geometry.text == 'parallel'
                                            LabelHelp:
                                                text: 'Source size [um]'
                                                help_message: parser_info['focal_spot_size'][1]
                                            FloatInput:
                                                id: focal_spot_size
                                        BoxLayout:
                                            LabelHelp:
                                                size_hint_x: 0.4
                                                text: 'Choose spectrum file'
                                                help_message: "Location of spectrum file (.csv).\nFile format:\nenergy,photons\ne1,p1\ne2,p2\n.,.\n.,.\n.,."
                                            Button:
                                                size_hint_x: 0.1
                                                text: 'Load'
                                                on_press: root.show_spectrum_load()
                                            Button:
                                                size_hint_x: 0.15
                                                text: 'Remove'
                                                on_press: root.spectrum_file_path = ''
                                            TextInput:
                                                text: ntpath.basename(root.spectrum_file_path)
                                                background_disabled_normal: self.background_normal
                                                disabled_foreground_color: self.foreground_color
                                                disabled: True
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Spectrum range [keV]'
                                                help_message: parser_info['spectrum_range'][1]
                                            CheckBox:
                                                id: spectrum_range_set
                                        BoxLayout:
                                            BoxLayout:
                                                size_hint_x: 0.5
                                                NonFileBrowserLabel:
                                                    text: 'Min'
                                                FloatInput:
                                                    id: spectrum_range_min
                                                    size_hint_x: 1
                                                    disabled: not spectrum_range_set.active
                                            BoxLayout:
                                                size_hint_x: 0.5
                                                NonFileBrowserLabel:
                                                    text: 'Max'
                                                FloatInput:
                                                    id: spectrum_range_max
                                                    size_hint_x: 1
                                                    disabled: not spectrum_range_set.active
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Spectrum step size [keV]'
                                                help_message: parser_info['spectrum_step'][1]
                                            FloatInput:
                                                id: spectrum_step
                                                text: '1.0'
                                                disabled: not spectrum_range_set.active or root.spectrum_file_loaded
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Filter material'
                                                help_message: parser_info['material_filter'][1]
                                            TextInput:
                                                id: material_filter
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Filter thickness [um]'
                                                help_message: parser_info['thickness_filter'][1]
                                            FloatInput:
                                                id: thickness_filter

                                # Detector
                                StackLayout:
                                    NonFileBrowserLabel:
                                        text: 'Detector'
                                    BoxLayout:
                                        orientation: 'vertical'
                                        size_hint_y: None
                                        height: root.calc_boxlayout_height(line_height, self)
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Detector type'
                                                help_message: parser_info['detector_type'][1]
                                            Spinner:
                                                id: detector_type
                                                text: 'photon'
                                                values: ['photon', 'conv']
                                        BoxLayout:
                                            disabled: detector_type.text == 'photon'
                                            LabelHelp:
                                                text: 'PSF [um]'
                                                help_message: parser_info['point_spread_function'][1]
                                            FloatInput:
                                                id: point_spread_function
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Pixel size [um]'
                                                help_message: parser_info['pixel_size'][1]
                                            FloatInput:
                                                id: pixel_size
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Field of view [no. pixels] (x, y)'
                                                help_message: parser_info['field_of_view'][1]
                                            IntInput:
                                                id: field_of_view_x
                                                size_hint_x: 0.25
                                            IntInput:
                                                id: field_of_view_y
                                                size_hint_x: 0.25
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Detector threshold [keV]'
                                                help_message: parser_info['detector_threshold'][1]
                                            FloatInput:
                                                id: detector_threshold
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Detector material'
                                                help_message: parser_info['material_detector'][1]
                                            TextInput:
                                                id: material_detector
                                        BoxLayout:
                                            LabelHelp:
                                                text: 'Detector thickness [um]'
                                                help_message: parser_info['thickness_detector'][1]
                                            FloatInput:
                                                id: thickness_detector



                            # Grating input
                            GridLayout:
                                cols: 1
                                pos_hint: {'top': 0.65}


                                StackLayout:
                                    BoxLayout:
                                        disabled: geometry.text == 'free'
                                        size_hint_y: None
                                        height: root.calc_boxlayout_height(line_height, self)
                                        NonFileBrowserLabel:
                                            text: 'Choose the fixed grating'
                                        Spinner:
                                            id: fixed_grating
                                            text: 'Choose fixed grating...'
                                            values: root.available_gratings
                                    BoxLayout:
                                        orientation: 'vertical'
                                        size_hint_y: None
                                        height: root.calc_boxlayout_height(line_height, self)
                                        GridLayout:
                                            cols: 3


                                            # G0
                                            StackLayout:
                                                BoxLayout:
                                                    NonFileBrowserLabel:
                                                        id: g0_set_name
                                                        text: 'G0'
                                                        bold: True
                                                    CheckBox:
                                                        id: g0_set
                                                        disabled: beam_geometry.text == 'parallel'
                                                        on_active: root.on_grating_checkbox_active(self.active, g0_set_name.text)
                                                BoxLayout:
                                                    orientation: 'vertical'
                                                    size_hint_y: None
                                                    height: root.calc_boxlayout_height(line_height, self)
                                                    disabled: not g0_set.active  or (fixed_grating.text != 'G0' and geometry.text != 'free')
                                                    BoxLayout:
                                                        LabelHelp:
                                                            text: 'Design Energy [keV]'
                                                            help_message: parser_info['design_energy'][1]
                                                        FloatInput:


                                            # G1
                                            StackLayout:
                                                BoxLayout:
                                                    NonFileBrowserLabel:
                                                        id: g1_set_name
                                                        text: 'G1'
                                                        bold: True
                                                    CheckBox:
                                                        id: g1_set
                                                        disabled: geometry.text != 'free'
                                                        background_checkbox_disabled_down: self.background_checkbox_down
                                                        on_active: root.on_grating_checkbox_active(self.active, g1_set_name.text)


                                            # G2
                                            StackLayout:
                                                BoxLayout:
                                                    NonFileBrowserLabel:
                                                        id: g2_set_name
                                                        text: 'G2'
                                                        bold: True
                                                    CheckBox:
                                                        id: g2_set
                                                        disabled: geometry.text != 'free'
                                                        background_checkbox_disabled_down: self.background_checkbox_down
                                                        on_active: root.on_grating_checkbox_active(self.active, g2_set_name.text)
                                                BoxLayout:
                                                    orientation: 'vertical'
                                                    size_hint_y: None
                                                    height: root.calc_boxlayout_height(line_height, self)
                                                    disabled: not g2_set.active or (fixed_grating.text != 'G2' and geometry.text != 'free')
                                                    Button:



                            # Distances
                            GridLayout:
                                cols: 1
                                pos_hint: {'top': 0.3}

                                Distances:
                                    id: distances




                            Button:
                                pos_hint: {'top': 0.04}
                                text: 'Check input'
                                on_press: root.check_general_input()

                    # Sample
                    TabbedPanelItem:
                        text: 'Sample'
                        BoxLayout:
                            orientation: 'vertical'
                            size_hint_y: None
                            height: root.calc_boxlayout_height(line_height, self)
                            BoxLayout:
                                NonFileBrowserLabel:
                                    text: 'Add sample'
                                Spinner:
                                    id: sample_relative_position
                                    text: 'after'
                                    values: ['after']
                                    on_text: root.on_sample_relative_position()
                                Spinner:
                                    id: sample_relative_to
                                    text: 'Source'
                                    on_text: root.on_sample_relative_to()
                                    values: root.setup_components if 'Sample' not in root.setup_components else list(root.setup_components).remove('Sample')
                                CheckBox:
                                    id: add_sample
                                    on_active: root.on_sample_checkbox_active(self.active)
                            BoxLayout:
                                orientation: 'vertical'
                                size_hint_y: None
                                height: root.calc_boxlayout_height(line_height, self)
                                disabled: not add_sample.active
                                BoxLayout:
                                    NonFileBrowserLabel:
                                        id: sample_distance_label
                                    FloatInput:
                                        id: sample_distance

                            Widget:
                            Widget:
                            Widget:

                Button:
                    size_hint_y: None
                    # tempFix for issue #9 (start)
                    height: line_height * 1.1
                    size_hint_x: 1.01
                    pos_hint: {'right': 0.999}
                    # tempFix for issue #9 (end)
                    text: 'Calculate geometry'
                    on_press: root.calculate_geometry()


        # Left side of splitter
        TabbedPanel:
            id: result_tabs
            do_default_tab: False
            tab_width: self.size[0]/len(self.tab_list)

            # Geometry
            TabbedPanelItem:
                text: 'Geometry'
                id: geometry_results
                BoxLayout:
                    orientation: 'vertical'
                    size_hint_y: None
                    height: root.calc_boxlayout_height(line_height, self)
                    BoxLayout:
                        orientation: 'vertical'
                        size_hint_y: None
                        height: root.calc_boxlayout_height(line_height, self)
                        NonFileBrowserLabel:
                            text: 'Do stuff'

                    Widget:
                    Widget:
                    Widget:

                    Button:
                        text: 'Calculate visibility'
                        on_press: root.calculate_visibility()

            # Visibility
            TabbedPanelItem:
                text: 'Visibility'
                id: visibility_results
                NonFileBrowserLabel:
                    text: '2. tab content area'

            # CT
            TabbedPanelItem:
                text: 'CT'
                BoxLayout:
                    NonFileBrowserLabel:
                        text: 'bla'
                    Button:
                        text: 'Raise error and display'
                        on_press: root.check_general_input()